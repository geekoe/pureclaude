#!/bin/sh

# Get npm root path
NPM_ROOT=$(npm root -g)

# Build claude-code path
CLAUDE_PATH="$NPM_ROOT/@anthropic-ai/claude-code/"

# Check if path exists
if [ ! -d "$CLAUDE_PATH" ]; then
    echo "Error: claude-code path not found: $CLAUDE_PATH"
    exit 1
fi

# Check if cli.js exists
if [ ! -f "$CLAUDE_PATH/cli.js" ]; then
    echo "Error: cli.js file not found: $CLAUDE_PATH/cli.js"
    exit 1
fi

# Check if cli.js.bak exists
if [ -f "$CLAUDE_PATH/cli.js.bak" ]; then
    # cli.js has already been modified, run it directly
    exec "$CLAUDE_PATH/cli.js" "$@"
fi

# Create backup of original cli.js
cp "$CLAUDE_PATH/cli.js" "$CLAUDE_PATH/cli.js.bak"

# Modify cli.js directly using JavaScript
node -e "
const fs = require('fs');
const content = fs.readFileSync('$CLAUDE_PATH/cli.js', 'utf8');

// Check for required text patterns first
if (!content.includes('You are an interactive CLI tool that helps users with software engineering tasks.')) {
    console.error('Error: Start text not found in cli.js');
    process.exit(1);
}
const lines = content.split('\n');
let inReplaceSection = false;
let skipNextLine = false;
const result = [];

for (const line of lines) {
    if (line.includes('You are an interactive CLI tool that helps users with software engineering tasks.')) {
        result.push('<use_parallel_tool_calls>For maximum efficiency, whenever you perform multiple independent operations, invoke all relevant tools simultaneously rather than sequentially. Prioritize calling tools in parallel whenever possible. For example, when reading 3 files, run 3 tool calls in parallel to read all 3 files into context at the same time. When running multiple read-only commands , always run all of the commands in parallel. Err on the side of maximizing parallel tool calls rather than running too many tools sequentially.</use_parallel_tool_calls>');
        inReplaceSection = true;
        continue;
    }
    
    if (line.includes('assistant: Clients are marked as failed in the') && inReplaceSection) {
        // Skip this line and mark to skip the next line too
        skipNextLine = true;
        continue;
    }
    
    if (skipNextLine) {
        skipNextLine = false;
        inReplaceSection = false;
        continue;
    }
    
    if (inReplaceSection) {
        continue;
    }
    
    let processedLine = line
        .replace(/NEVER create files unless they're absolutely necessary for achieving your goal\./g, '')
        .replace(/ALWAYS prefer editing an existing file to creating a new one\./g, '');
    
    result.push(processedLine);
}

fs.writeFileSync('$CLAUDE_PATH/cli.js', result.join('\n'));
"

# Run the modified cli.js
exec "$CLAUDE_PATH/cli.js" "$@"
